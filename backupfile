pipeline {
    agent any

    environment {
        IMAGE_NAME = "chatgpt-ui"
        DOCKER_REGISTRY = "hub.docker.com/repository/docker/dhanush08/ui"
        DOCKER_CREDENTIALS = "docker-creds"
        SONAR_TOKEN = credentials('sonar-token') // Add this in Jenkins credentials
    }

    tools {
        // Optional: If using SonarQube CLI Scanner tool in Jenkins
        sonarQube 'SonarScanner'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('MySonarQube') {
                    sh """
                        sonar-scanner \
                        -Dsonar.projectKey=chatgpt-ui \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://your-sonarqube-host \
                        -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}:latest")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    def imageName = "dhanush08/ui:${env.BUILD_ID}"

                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS) {
                        def image = docker.build(imageName)
                        image.push()
                    }
                }
            }
        }

        stage('Deploy To Kubernetes') {
            steps {
                withKubeConfig(
                    caCertificate: '', 
                    clusterName: 'kubernetes', 
                    contextName: '', 
                    credentialsId: 'k8-login', 
                    namespace: 'chatgpt-ui', 
                    restrictKubeConfigAccess: false, 
                    serverUrl: 'https://192.168.28.129:6443'
                ) {
                    bat "kubectl apply -f deployment.yaml"
                    bat "kubectl apply -f service.yaml"
                }
            }
        }

        stage('Verify the Deployment') {
            steps {
                withKubeConfig(
                    caCertificate: '', 
                    clusterName: 'kubernetes', 
                    contextName: '', 
                    credentialsId: 'k8-login', 
                    namespace: 'chatgpt-ui', 
                    restrictKubeConfigAccess: false, 
                    serverUrl: 'https://192.168.28.129:6443'
                ) {
                    bat "kubectl get pods -n chatgpt-ui"
                    bat "kubectl get svc -n chatgpt-ui"
                }
            }
        }
    }
}
